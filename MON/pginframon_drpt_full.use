cat > pginframon.sh
#!/usr/bin/ksh

#### init
export TERM=ansi
export LANG=C
export PATH=/usr/pgsql-9.6/bin:$PATH
export LD_LIBRARY_PATH=/usr/pgsql-9.6/lib:$LD_LIBRARY_PATH
export PGDATA=/work3/pgcluster
export PGPORT=5431
export PGUSER=postgres
export PGDATABASE=postgres
export PGDB=13325

#### db2 monitor
cnt=0; rr=0; while true 
do
perl /work3/pgcluster/IFR/MONITOR/pginframon_apinfo.pl -d $PGDB -s 0 -q 10000000 -w 1000000 -e 10000000 -t 0 -a 0 -p 0 -o /work3/pgcluster/IFR/MONITOR/LOG_PERL_D -z -x -c -v
cnt=`expr $cnt + 1` 
sleep 5

if [ `expr $cnt % 30` -eq 0 ];
then
        perl /work3/pgcluster/IFR/MONITOR/pginframon_apinfo.pl -d $PGDB -s 0 -q 10000000 -w 1000000 -e 10000000 -t 5 -a 0 -p 0 -o /work3/pgcluster/IFR/MONITOR/LOG_PERL -z -x -c -v #-O
        #sleep 5
        if [ `expr $cnt % 60` -eq 0 ];
        then
                if [ $rr -eq 0 ];
                then
                        perl /work3/pgcluster/IFR/MONITOR/db2inframon_drpt_full.pl -c 8 -u 3 -t 5 -x ./package.sh -y ./package.sh -n ./package_header.sh -l ./package_log.sh -q 3 -e -o /work3/pgcluster/IFR/MONITOR/LOG_PERL
                        rr=1
                else
                        perl /work3/pgcluster/IFR/MONITOR/db2inframon_drpt_full.pl -c 8 -u 3 -t 5 -x ./package.sh -y ./package.sh -n ./package_header.sh -l ./package_log.sh -q 3 -o /work3/pgcluster/IFR/MONITOR/LOG_PERL
                        rr=0                            
                fi
                
                #sleep 5
                cnt=0
        fi
        sleep 5
fi
done
 
#### reset



cat > package.sh
psql -F ' ' -A -t -c "select queryid, sum(calls) calls, sum(shared_blks_hit+shared_blks_read) all_blks_read, sum(rows) c_f_rows, sum(total_time) t_exec_time, sum(shared_blks_written) all_blks_mod, sum(temp_blks_read) tmp_blks_read, sum(shared_blks_hit) blks_hit, sum(shared_blks_read) blks_read
from pg_stat_statements
where dbid = $PGDB
group by queryid"



cat > package_header.sh
perl -e '
printf "%25s%25s%25s%25s%25s%25s%25s%25s%25s\n", "queryid","calls","all_blks_read","c_f_rows","t_exec_time","all_blks_mod","tmp_blks_read","blks_hit","blks_read";
'



cat > package_log.sh
echo -e "\n!! $1 [ $2 ] !!" >> $3 2>&1
psql -F ' ' -A -t -c "select query
from pg_stat_statements
where dbid = $PGDB
and queryid = $1" >> $3 2>&1



************************* table anal
cat db2inframon_20200130.log | grep "Tab_Rows_rw " |perl -MData::Dumper -ane '
@roww = split(/:/,$F[4]);
if($seen{$F[2]}) {
 $cnt = $seen{$F[2]}->[0] + 1;
 $seen{$F[2]}->[0] = $cnt; #seen cnt
 $seen{$F[2]}->[1] = ($seen{$F[2]}->[1] + $roww[0]); #read
 $seen{$F[2]}->[2] = ($seen{$F[2]}->[2] + $roww[1]); #write
 $seen{$F[2]}->[3] = ($seen{$F[2]}->[3] + $roww[2]); #tbscan
 $seen{$F[2]}->[4] = ($seen{$F[2]}->[4] + $roww[3]); #query, data/lob/index/pcnt
 $seen{$F[2]}->[9] = ($seen{$F[2]}->[9] + $roww[8]); #lock escal
 $seen{$F[2]}->[10] = ($seen{$F[2]}->[10] + $roww[9]); #lock wait
 }
else { $seen{$F[2]} = [(1,@roww)] }
END{
 foreach $key (keys %seen) {
 $seen{$key}->[1] = int($seen{$key}->[1] / $seen{$key}->[0]);
 $seen{$key}->[2] = int($seen{$key}->[2] / $seen{$key}->[0]);
 $seen{$key}->[3] = int($seen{$key}->[3] / $seen{$key}->[0]);
 $seen{$key}->[4] = int($seen{$key}->[4] / $seen{$key}->[0]);
 if($seen{$key}->[4] == 0) { $qcnt = 1 } else { $qcnt = $seen{$key}->[4] }
 $seen{$key}->[11] = int($seen{$key}->[1] / $qcnt); #read per query

 $seen{$key}->[9] = int($seen{$key}->[9] / $seen{$key}->[0]);
 $seen{$key}->[10] = int($seen{$key}->[10] / $seen{$key}->[0]);
 
 print "$key $seen{$key}->[0] $seen{$key}->[1] $seen{$key}->[2] $seen{$key}->[3] $seen{$key}->[4] $seen{$key}->[5] $seen{$key}->[6] $seen{$key}->[7] $seen{$key}->[8] $seen{$key}->[9] $seen{$key}->[10] $seen{$key}->[11]\n";
 }
}
' |sort -k2 -n

************************* trans anal
cat db2inframon_20200226.log | grep "Trans " |perl -MData::Dumper -ane '
@roww = ($F[2],$F[4],$F[5],$F[6],$F[7]);
if($seen{$F[1]}) {
 $cnt = $seen{$F[1]}->[0] + 1;
 $seen{$F[1]}->[0] = $cnt; #seen cnt
 $seen{$F[1]}->[1] = ($seen{$F[1]}->[1] + $roww[0]); #trans
 $seen{$F[1]}->[2] = ($seen{$F[1]}->[2] + $roww[1]); #commit
 $seen{$F[1]}->[3] = ($seen{$F[1]}->[3] + $roww[2]); #intcomm
 $seen{$F[1]}->[4] = ($seen{$F[1]}->[4] + $roww[3]); #rollback
 $seen{$F[1]}->[5] = ($seen{$F[1]}->[5] + $roww[4]); #introll
 }
else { $seen{$F[1]} = [(1,@roww)] }
END{
 foreach $key (keys %seen) {
 $seen{$key}->[1] = int($seen{$key}->[1] / $seen{$key}->[0]);
 $seen{$key}->[2] = int($seen{$key}->[2] / $seen{$key}->[0]);
 $seen{$key}->[3] = int($seen{$key}->[3] / $seen{$key}->[0]);
 $seen{$key}->[4] = int($seen{$key}->[4] / $seen{$key}->[0]);
 $seen{$key}->[5] = int($seen{$key}->[5] / $seen{$key}->[0]);
 
 print "$key $seen{$key}->[0] $seen{$key}->[1] $seen{$key}->[2] $seen{$key}->[3] $seen{$key}->[4] $seen{$key}->[5]\n";
 }
}
'

